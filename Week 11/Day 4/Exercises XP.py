# -*- coding: utf-8 -*-
"""Week 11 Day 4 Exercises XP

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JTfF310pJEMxnYcu8mQa-uJTNmoeIoZA

**ðŸŒŸ Exercise 1 : Basic Usage of SciPy**

**Instructions**

Import the SciPy library and explore its version.
"""

import scipy

# Print Scipy version
print('Scipy Version:', scipy.__version__)

"""**ðŸŒŸ Exercise 2 : Descriptive Statistics**

**Instructions**

Given a sample dataset, calculate the mean, median, variance, and standard deviation using SciPy.

Sample dataset in code:
data = [12, 15, 13, 12, 18, 20, 22, 21]
"""

from scipy import stats

data = [12, 15, 13, 12, 18, 20, 22, 21]

mean = stats.tmean(data)
median = stats.scoreatpercentile(data, 50)
variance = stats.tvar(data)
std_dev = stats.tstd(data)

print("Mean:", mean)
print("Median:", median)
print("Variance:", variance)
print("Standard Deviation:", std_dev)

"""**ðŸŒŸ Exercise 3 : Understanding Distributions**

**Instructions**

Generate a normal distribution using SciPy with a mean of 50 and a standard deviation of 10. Plot this distribution.
"""

import numpy as np
import matplotlib.pyplot as plt
from scipy.stats import norm

mean = 50
std_dev = 10

x = np.linspace(0, 100, 1000)
y = norm.pdf(x, mean, std_dev)

plt.plot(x, y, label ='Normal Distribution')
plt.title('Normal Distribution (mean = 50, std_dev=10)')
plt.xlabel('X')
plt.ylabel('Probability Density')
plt.grid(True)
plt.legend()
plt.show()

"""**ðŸŒŸ Exercise 4 : T-Test Application**

**Instructions**

Perform a T-test on two sets of randomly generated data. Hint: Use numpy.random.normal() to generate the datasets.
"""

from scipy.stats import ttest_ind

# Generate two random datasets
np.random.seed(42)
group1 = np.random.normal(60, 10, 100)
group2 = np.random.normal(65, 12, 100)

# independent t-test
t_stat, p_value = ttest_ind(group1, group2)

print('T-Statistic:', t_stat)
print('P-Value:', p_value)

"""**ðŸŒŸ Exercise 5 : Working with DataFrames**

**Instructions**

**Task**: Import a dataset using Pandas and calculate descriptive statistics for a specific column using SciPy.

**Sample Dataset:** Use any publicly available dataset (e.g., Iris dataset).

**Code Example:**

import pandas as pd

df = pd.read_csv('path_to_iris_dataset.csv')
"""

import pandas as pd

# Load the Iris dataset from a URL
url = "https://raw.githubusercontent.com/mwaskom/seaborn-data/master/iris.csv"
df = pd.read_csv(url)

# Choose a column (e.g., sepal_length)
sepal_length = df['sepal_length']

# Compute descriptive stats
print("Mean:", stats.tmean(sepal_length))
print("Variance:", stats.tvar(sepal_length))
print("Standard Deviation:", stats.tstd(sepal_length))
print("Skewness:", stats.skew(sepal_length))
print("Kurtosis:", stats.kurtosis(sepal_length))

"""**ðŸŒŸ Exercise 6 : Advanced Statistical Functions**

**Instructions**

**Task:** Explore one advanced statistical function in SciPy and demonstrate its use with an example.

**Sample Task:** Calculate kurtosis and skewness of a dataset.

**Code Example:**

data = np.random.normal(0, 1, 1000)
"""

from scipy.stats import kurtosis, skew

data = np.random.normal(0, 1, 1000)

kurt = kurtosis(data)
skw = skew(data)

print('Kurtosis:', kurt)
print('Skewness:', skw)